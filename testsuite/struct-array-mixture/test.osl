struct A { int i; };
struct B { A a; };
struct C { B bs[5]; };
struct D { C c; };

        
void Atest (A a, int multiplier)
{
    printf ("passing a ref to a A:\n");
    a.i = multiplier;
    printf ("a.i = %d\n", a.i);
    printf ("\n");
}



void Btest (B b, int multiplier)
{
    printf ("passing a ref to a B:\n");
    b.a.i = multiplier;
    printf ("b.a.i = %d\n", b.a.i);
    printf ("\n");
}


void Barraytest (B bs[], int multiplier)
{
    printf ("passing a ref to a B[]:\n");
    for (int i = 0;  i < 5;  ++i)
        bs[i].a.i = i*multiplier;
    for (int i = 0;  i < 5;  ++i)
        printf ("bs[%d].a.i = %d\n", i, bs[i].a.i);
    printf ("\n");
}



void Ctest (C c, int multiplier)
{
    printf ("passing a ref to a C:\n");
    for (int i = 0;  i < 5;  ++i)
        c.bs[i].a.i = i*multiplier;
    for (int i = 0;  i < 5;  ++i)
        printf ("c.bs[%d].a.i = %d\n", i, c.bs[i].a.i);
    printf ("\n");
}



void Dtest (D d, int multiplier)
{
    printf ("passing a ref to a D:\n");
    for (int i = 0;  i < 5;  ++i)
        d.c.bs[i].a.i = i*multiplier;
    for (int i = 0;  i < 5;  ++i)
        printf ("d.c.bs[%d].a.i = %d\n", i, d.c.bs[i].a.i);
    printf ("\n");
}



shader test ()
{
    D d;

    printf ("Using a D directly in main:\n");
    for (int i = 0;  i < 5;  ++i)
        d.c.bs[i].a.i = i*1;
    for (int i = 0;  i < 5;  ++i)
        printf ("d.c.bs[%d].a.i = %d\n", i, d.c.bs[i].a.i);
    printf ("\n");

    Dtest (d, 1);
    Ctest (d.c, 3);
    Barraytest (d.c.bs, 4);
    Btest (d.c.bs[1], 4);

// FIXME -- needs work!  these still don't work properly
//    Atest (d.c.bs[2].a, 5);

    // Test assignment of the whole thing
    printf ("Testing assignment of the whole nested structure:\n");
    D d2;
    d2 = d;
    Dtest (d2, 1);
}

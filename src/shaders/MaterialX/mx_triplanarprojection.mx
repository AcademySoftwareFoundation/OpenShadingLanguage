// Open Shading Language : Copyright (c) 2009-2017 Sony Pictures Imageworks Inc., et al.
// https://github.com/imageworks/OpenShadingLanguage/blob/master/LICENSE
// 
// MaterialX specification (c) 2017 Lucasfilm Ltd. 
// http://www.materialx.org/

#include "mx_types.h"

shader SHADER_NAME(mx_triplanarprojection)
    [[ string help = "triplanarprojection node" ]]
  (
    string filex = ""        
        [[  string help = "Texture filename",
            string widget = "filename" ]],

    string filey = ""
        [[  string help = "Texture filename",
            string widget = "filename" ]],

    string filez = ""
        [[  string help = "Texture filename",
            string widget = "filename" ]],

    string layerx = "",
    string layery = "",
    string layerz = "",
    TYPE default_value = TYPE_DEFAULT_IN,
    vector position = P,
	normal inN   = N,
    output TYPE out = TYPE_ZERO
  )
{

    #if defined(COLOR) || defined(VECTOR) || defined(FLOAT)
        color missingColor = default_value;   
        float missingAlpha = 1;        
    #elif defined(COLOR2)
        color missingColor = color(default_value.r, default_value.a, 0);
        float missingAlpha = 1;                
    #elif defined(VECTOR2)
        color missingColor = color(default_value.x, default_value.y, 0);
        float missingAlpha = 1;                
    #elif defined(COLOR4)
        color missingColor = default_value.rgb;
        float missingAlpha = default_value.a;        
    #elif defined(VECTOR4)
        color missingColor = color(default_value.x, default_value.y, default_value.z);
        float missingAlpha = default_value.w;        
    #endif

    float filex_a;
    color filex_rgb = texture(filex, position[1], position[2], "alpha", filex_a, "subimage", layerx,
                              "missingcolor", missingColor, "missingalpha", missingAlpha);

    float filey_a;
    color filey_rgb = texture(filey, position[0], position[2], "alpha", filey_a, "subimage", layery,
                              "missingcolor", missingColor, "missingalpha", missingAlpha);

    float filez_a;
    color filez_rgb = texture(filez, position[0], position[1], "alpha", filez_a, "subimage", layerz,
                              "missingcolor", missingColor, "missingalpha", missingAlpha);

    normal nIn = normalize(inN);
    float blendx = dot(nIn, vector(1, 0, 0));
    float blendy = dot(nIn, vector(0, 1, 0));
    float blendz = dot(nIn, vector(0, 0, 1));

    color rgb = (filex_rgb * blendx) + (filey_rgb * blendy) + (filez_rgb * blendz);
    float alpha = (filex_a * blendx) + (filey_a * blendy) + (filez_a * blendz);

    #if defined(COLOR) || defined(VECTOR)
        out = rgb;           
    #elif defined(FLOAT)
        out = rgb[0];
    #elif defined(COLOR2) || defined(VECTOR2)
        out = TYPE(rgb[0], rgb[1]);
    #elif defined(COLOR4)
        out = color4(rgb, alpha);
    #elif defined(VECTOR4)
        out = vector4(rgb[0], rgb[1], rgb[2], alpha);
    #endif 
}

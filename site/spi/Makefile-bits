# SPI-specific settings

# For SpComp2 builds, set env OSL_SPCOMP2=1, and either
#     make OSL_SPCOMP2=1 spcomp2_install
# or
#     make OSL_SPCOMP2=1 SPCOMP2_LOCAL_PATH=/test/path spcomp2_install_local
#
# For Arnold builds, set env OSL_ARNOLD=1 and just do a regular
# "make". We make this the default, so if you want neither an Arnold nor
# a SpComp2, you have to set OSL_ARNOLD=0.  If both are set, SpComp2
# takes precedence.
OSL_SPCOMP2 ?= 0
OSL_ARNOLD ?= 1
ifeq (${OSL_SPCOMP2},1)
    OSL_ARNOLD := 0
    NAMESPACE ?= 'OSL_SpComp2'
    SPI_FLAVOR := SpComp2
    OSL_SPCOMP2_VERSION ?= 1
    SOVERSION ?= ${OSL_SPCOMP2_VERSION}
    OPENIMAGEIO_SPCOMP2_VERSION ?= 47
    $(info Building for SpComp2)
else ifeq (${OSL_ARNOLD},1)
    NAMESPACE ?= 'OSL_Arnold'
    SPI_FLAVOR := Arnold
    $(info Building for Arnold)
endif
#$(info MAKECMDGOALS = $(MAKECMDGOALS))

SPCOMP2_ROOT ?= /shots/spi/home/lib/SpComp2
SPCOMP2_INSTALL_ROOT = $(SPCOMP2_ROOT)
MY_CMAKE_FLAGS += -DEXTRA_CPP_ARGS="-DOSL_SPI=1"

## Rhel7 (current)
ifeq ($(SP_OS), rhel7)
    platform=rhel7
    USE_CPP ?= 11
    USE_SIMD = sse4.1
    CMAKE ?= cmake
    USE_NINJA ?= 1
    NINJA ?= ninja
    ifeq ($(USE_NINJA),1)
        MY_CMAKE_FLAGS += -DCMAKE_MAKE_PROGRAM=${NINJA}
    endif
    PYTHON_VERSION ?= 2.7
    PYVERNOSPACE=${shell echo ${PYTHON_VERSION} | sed "s/\\.//"}
    PYTHON_LIBRARY_DIR ?= /usr/lib64
    PYTHON_LIBRARY ?= ${PYTHON_LIBRARY_DIR}/libpython${PYTHON_VERSION}.so
    PYTHON_INCLUDE_DIR ?= /usr/include/python${PYTHON_VERSION}
    # Override lib64 and use SPI convention of lib
    MY_CMAKE_FLAGS += -DCMAKE_INSTALL_LIBDIR="${INSTALL_PREFIX}/lib"
    MY_CMAKE_FLAGS += -DCUDA_TOOLKIT_ROOT_DIR=/net/soft_scratch/apps/arnold/tools/nvidia/cuda9.1 -DOPTIX_EXTRA_LIBS=lzma
    MY_CMAKE_FLAGS += -DOPTIXHOME=/net/soft_scratch/apps/arnold/tools/nvidia/NVIDIA-OptiX-SDK-5.1.0-linux64
    ifneq (${OSL_ARNOLD},0)
        MY_CMAKE_FLAGS += -DOIIO_LIBNAME_SUFFIX=_Arnold
        MY_CMAKE_FLAGS += -DOSL_LIBNAME_SUFFIX=_Arnold
    endif

    ## If not overridden, here is our preferred LLVM installation
    ## (may be changed as new versions are rolled out to the facility)
    LLVM_DIRECTORY ?= /shots/spi/home/lib/arnold/rhel7/llvm_7.0.1

    # A variety of tags can be used to try specific versions of gcc or
    # clang from the site-specific places we have installed them.
    ifeq (${COMPILER}, clang6)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=/shots/spi/home/lib/arnold/rhel7/llvm_6.0.1/bin/clang \
           -DCMAKE_CXX_COMPILER=/shots/spi/home/lib/arnold/rhel7/llvm_6.0.1/bin/clang++
    else ifeq (${COMPILER}, clang7)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=/shots/spi/home/lib/arnold/rhel7/llvm_7.0.1/bin/clang \
           -DCMAKE_CXX_COMPILER=/shots/spi/home/lib/arnold/rhel7/llvm_7.0.1/bin/clang++
    else ifeq (${COMPILER},clang)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    else ifeq (${COMPILER}, gcc6)
      MY_CMAKE_FLAGS += \
         -DCMAKE_C_COMPILER=/opt/rh/devtoolset-6/root/usr/bin/gcc \
         -DCMAKE_CXX_COMPILER=/opt/rh/devtoolset-6/root/usr/bin/g++
    else ifeq (${COMPILER},gcc)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
    else ifeq (${COMPILER},)
        # default compiler is clang, taken from the LLVM directory
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=${LLVM_DIRECTORY}/bin/clang \
           -DCMAKE_CXX_COMPILER=${LLVM_DIRECTORY}/bin/clang++
        MY_CMAKE_FLAGS += -DCMAKE_C_FLAGS="--gcc-toolchain=/usr" \
                          -DCMAKE_CXX_FLAGS="--gcc-toolchain=/usr" \
			  -DTOOLCHAIN_FLAGS="--gcc-toolchain=/usr"
    endif

    MY_CMAKE_FLAGS += \
	-DOPENEXR_INCLUDE_DIR=/usr/include/OpenEXR2 \
	-DOPENEXR_LIBRARY_DIR=/usr/lib64/OpenEXR2 \
	-DLLVM_STATIC=1 \
        -DLLVM_VERSION=${LLVM_VERSION} \
        -DLLVM_DIRECTORY=${LLVM_DIRECTORY}

    BOOSTVERS ?= 1.55
    BOOSTSPSUFFIX ?= 
    BOOSTVERSSP=${BOOSTVERS}${BOOSTSPSUFFIX}
    BOOSTVERS_SUFFIX = -${shell echo ${BOOSTVERS} | sed "s/\\./_/"}
    BOOSTVERS_PREFIX = ${shell echo ${BOOSTVERS} | sed "s/\\./_/"}_0
    CONSTRUCTED_BOOSTVERS = ${shell echo ${BOOSTVERS} | sed "s/\\./0/"}00
    MY_CMAKE_FLAGS += \
        -DBOOST_CUSTOM=1 \
        -DBoost_VERSION=${CONSTRUCTED_BOOSTVERS} \
        -DBoost_INCLUDE_DIRS=/usr/include/boost_${BOOSTVERSSP} \
        -DBoost_LIBRARY_DIRS=/usr/lib64/boost_${BOOSTVERS}
    MY_CMAKE_FLAGS += \
        -DBoost_LIBRARIES:STRING="/usr/lib64/boost_${BOOSTVERSSP}/lib${BOOSTSPSUFFIX}boost_regex-gcc48-mt${BOOSTVERS_SUFFIX}.so;/usr/lib64/boost_${BOOSTVERSSP}/lib${BOOSTSPSUFFIX}boost_system-gcc48-mt${BOOSTVERS_SUFFIX}.so;/usr/lib64/boost_${BOOSTVERSSP}/lib${BOOSTSPSUFFIX}boost_thread-gcc48-mt${BOOSTVERS_SUFFIX}.so"

    PARTIO_HOME := ${SPCOMP2_ROOT}/partio/rhel7-gcc48m64-boost155/v3
    MY_CMAKE_FLAGS += -DPARTIO_HOME="${PARTIO_HOME}"

    # set up OpenImageIO distribution environment
    ifeq (${OSL_SPCOMP2},1)
        OPENIMAGEIO_ROOT_DIR=$(SPCOMP2_ROOT)/OpenImageIO/$(SPARCH)/v$(OPENIMAGEIO_SPCOMP2_VERSION)
    else ifneq (${OPENIMAGEIO_ROOT_DIR},)
        # User supplied something
    else ifeq (${OSL_ARNOLD},1)
        OPENIMAGEIO_ROOT_DIR=${working_dir}/../OpenImageIO_local/dist/${platform}${variant}/
    endif
    ifneq ($(OPENIMAGEIO_ROOT_DIR),)
        MY_CMAKE_FLAGS += -DOPENIMAGEIO_ROOT_DIR:STRING=$(OPENIMAGEIO_ROOT_DIR)
    endif

    SPCOMP2_COMPILER ?= gcc48m64
    SPARCH=${SP_OS}-$(SPCOMP2_COMPILER)$(CPPSTDSUFFIX)-boost$(subst .,,$(BOOSTVERSSP))
    SPPYARCH=$(SPARCH)-py$(PYVERNOSPACE)

# end rhel7

## Generic OSX machines (including LG's laptop)
else ifeq (${platform}, macosx)
    USE_CPP ?= 11
    USE_SIMD ?= sse4.2
    MY_CMAKE_FLAGS += \
        -DCMAKE_BUILD_WITH_INSTALL_RPATH=1 \
        -DCMAKE_INSTALL_NAME_DIR="${working_dir}/dist/${platform}${variant}/lib"

    LLVM_DIRECTORY ?= /usr/local/opt/llvm

    # A variety of tags can be used to try specific versions of gcc or
    # clang from the site-specific places we have installed them.
    ifeq (${COMPILER}, gcc5)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=gcc-5 -DCMAKE_CXX_COMPILER=g++-5
        USE_LIBCPLUSPLUS := 0
    else ifeq (${COMPILER}, gcc6)
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=gcc-6 -DCMAKE_CXX_COMPILER=g++-6
        USE_LIBCPLUSPLUS := 0
    else ifeq (${COMPILER},clang7)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=/usr/local/Cellar/llvm/7.0.1/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/Cellar/llvm/7.0.1/bin/clang++
    else ifeq (${COMPILER},clang)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    else ifeq (${COMPILER},gcc)
        MY_CMAKE_FLAGS += -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
    else ifeq (${COMPILER},)
        # default compiler is clang, taken from the LLVM directory
        MY_CMAKE_FLAGS += \
           -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    endif

    # end generic OSX

else
    $(error Unknown SP_OS)
endif  # endif $(SP_OS)



ifneq (${VERBOSE},)
    $(info MY_CMAKE_FLAGS: $(MY_CMAKE_FLAGS))
endif



############################################################################
# SpComp2 magic incantations follow. Here be dragons
############################################################################


all: dist

.PHONY: spcomp2_install spcomp2_install_local clean all

spcomp2_install_local: SPCOMP2_INSTALL_ROOT = $(SPCOMP2_LOCAL_PATH)
spcomp2_install_local: spcomp2_install

comma:= ,
empty:=
space:= $(empty) $(empty)

#OSL_SPCOMP2_PATH := ${SPCOMP2_INSTALL_ROOT}/OSL/${SP_OS}-${SPCOMP2_COMPILER}$(CPPSTDSUFFIX)-boost${SPCOMP2_BOOSTVERS_SUFFIX}/v${OSL_SPCOMP2_VERSION}
#$(info New rhel7 OSL_SPCOMP2_PATH is ${OSL_SPCOMP2_PATH})

#INSTALL_SPCOMP2_CURRENT = $(SPCOMP2_INSTALL_ROOT)/OSL/$(SPARCH)/v$(OSL_SPCOMP2_VERSION)
#INSTALL_BIN_LOCATION = $(INSTALL_SPCOMP2_CURRENT)/bin

SPCOMP2_RPATH_OPT ?= ${OPENIMAGEIO_ROOT_DIR}/lib:${PARTIO_HOME}/lib
SPCOMP2_RPATH_DEBUG ?= ${OPENIMAGEIO_ROOT_DIR}/lib:${PARTIO_HOME}/lib/debug
#PYSPCOMP2_RPATH_OPT ?= ${SPCOMP2_RPATH_OPT}:${OSL_SPCOMP2_PATH}/lib:${PYTHON_LIBRARY_DIR}
#PYSPCOMP2_RPATH_DEBUG ?= ${SPCOMP2_RPATH_DEBUG}:${OSL_SPCOMP2_PATH}/lib/debug:${PYTHON_LIBRARY_DIR}



local: dist

spcomp2: MY_CMAKE_FLAGS += \
		-DCMAKE_SKIP_BUILD_RPATH:BOOL=ON \
		-DCMAKE_INSTALL_RPATH=$(SPCOMP2_INSTALL_ROOT)/OSL/$(SPARCH)/v$(OSL_SPCOMP2_VERSION)/lib \
		-DCMAKE_INSTALL_RPATH_USE_LINK_PATH:BOOL=ON \
		-DPYLIB_INCLUDE_SONAME:BOOL=ON \
		-DPYLIB_LIB_PREFIX:BOOL=ON \
		-DPYMODULE_SUFFIX="V${OSL_SPCOMP2_VERSION}"

spcomp2: dist

spcomp2_debug: MY_CMAKE_FLAGS += \
		-DCMAKE_SKIP_BUILD_RPATH:BOOL=ON \
		-DCMAKE_INSTALL_RPATH=$(SPCOMP2_INSTALL_ROOT)/OSL/$(SPARCH)/v$(OSL_SPCOMP2_VERSION)/lib \
		-DCMAKE_INSTALL_RPATH_USE_LINK_PATH:BOOL=ON \
		-DPYLIB_INCLUDE_SONAME:BOOL=ON \
		-DPYLIB_LIB_PREFIX:BOOL=ON \
		-DPYMODULE_SUFFIX="V${OSL_SPCOMP2_VERSION}"

spcomp2_debug: debug

spcomp2_install_fixup_rhel7: spcomp2 spcomp2_debug
	echo $(SPCOMP2_INSTALL_ROOT)
	patchelf --set-rpath ${SPCOMP2_RPATH_OPT} ${dist_dir}/lib/liboslexec.so
	patchelf --set-rpath ${SPCOMP2_RPATH_DEBUG} ${dist_dir}.debug/lib/liboslexec.so
	patchelf --set-rpath ${SPCOMP2_RPATH_OPT} ${dist_dir}/lib/liboslcomp.so
	patchelf --set-rpath ${SPCOMP2_RPATH_DEBUG} ${dist_dir}.debug/lib/liboslcomp.so
	patchelf --set-rpath ${SPCOMP2_RPATH_OPT} ${dist_dir}/lib/liboslquery.so
	patchelf --set-rpath ${SPCOMP2_RPATH_DEBUG} ${dist_dir}.debug/lib/liboslquery.so
#	patchelf --set-rpath ${PYSPCOMP2_RPATH_OPT} ${dist_dir}/python/libPyOSL.so
#	patchelf --set-rpath ${PYSPCOMP2_RPATH_DEBUG} ${dist_dir}.debug/python/libPyOSL.so

# This goal can't start with 'install' because something elsewhere picks
# it up and starts doing bad things
spcomp2_install: spcomp2_install_fixup_${SP_OS}
	perl -I/usr/local/spi/lib/make /usr/local/spi/bin/spcomp_install.pl -m installhost \
	  --project=oslexec \
	  --version=$(OSL_SPCOMP2_VERSION) \
	  --root=$(SPCOMP2_INSTALL_ROOT) \
	  --arch=$(SPARCH) \
	  --headers=$(subst $(space),$(comma),$(wildcard ${dist_dir}/include/OSL/*)) \
	  --cflags= --static_lflags="$(LINK_BOOST) $(LINK_OPENEXR) -lpthread" \
	  --namespace=${NAMESPACE} \
	  --srcdir=${dist_dir}/lib \
	  --builddir_o=${dist_dir}/lib \
	  --builddir_d=${dist_dir}.debug/lib
	perl -I/usr/local/spi/lib/make /usr/local/spi/bin/spcomp_install.pl -m installhost \
	  --project=oslquery \
	  --version=$(OSL_SPCOMP2_VERSION) \
	  --root=$(SPCOMP2_INSTALL_ROOT) \
	  --arch=$(SPARCH) \
	  --headers=$(subst $(space),$(comma),$(wildcard ${dist_dir}/include/OSL/*)) \
	  --cflags= --static_lflags="$(LINK_BOOST) $(LINK_OPENEXR) -lpthread" \
	  --namespace=${NAMESPACE} \
	  --srcdir=${dist_dir}/lib \
	  --builddir_o=${dist_dir}/lib \
	  --builddir_d=${dist_dir}.debug/lib
	#perl -I/usr/local/spi/lib/make /usr/local/spi/bin/spcomp_install.pl -m installhost \
	#  --project=oslcomp \
	#  --version=$(OSL_SPCOMP2_VERSION) \
	#  --root=$(SPCOMP2_INSTALL_ROOT) \
	#  --arch=$(SPARCH) \
	#  --headers=$(subst $(space),$(comma),$(wildcard ${dist_dir}/include/OSL/*)) \
	#  --cflags= --static_lflags="$(LINK_BOOST) $(LINK_OPENEXR) -lpthread" \
	#  --namespace=${NAMESPACE} \
	#  --srcdir=${dist_dir}/lib \
	#  --builddir_o=${dist_dir}/lib \
	#  --builddir_d=${dist_dir}.debug/lib
	#perl -I/usr/local/spi/lib/make /usr/local/spi/bin/spcomp_install.pl -m installhost \
	#  --project=PyOSL \
	#  --version=$(OSL_SPCOMP2_VERSION) \
	#  --root=$(SPCOMP2_INSTALL_ROOT) \
	#  --arch=$(SPPYARCH) \
	#  --cflags= --static_lflags="$(LINK_BOOST) $(LINK_OPENEXR) -lpthread"\
	#  --namespace=${NAMESPACE} \
	#  --srcdir=${dist_dir}/python \
	#  --builddir_o=${dist_dir}/python \
	#  --builddir_d=${dist_dir}.debug/python


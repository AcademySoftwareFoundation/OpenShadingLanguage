// Open Shading Language : Copyright (c) 2009-2017 Sony Pictures Imageworks Inc., et al.
// https://github.com/imageworks/OpenShadingLanguage/blob/master/LICENSE
// 
// MaterialX specification (c) 2017 Lucasfilm Ltd. 
// http://www.materialx.org/


#include "mx_types.h"
#include "oslutil.h"


shader
SHADER_NAME(mx_image)
    [[ string help = "Texture lookup" ]]
(
    string file = ""
        [[  string help = "Texture filename",
            string widget = "filename" ]],
            
    string layer = ""
        [[  string help = "Subimage in texture file",
            string widget = "filename" ]],
            
    TYPE default_value = TYPE_ZERO
        [[  string help = "Default value" ]],
     
    vector2 texcoord = {u,v}
        [[ string help = "Vector2 texture coordinates",
           int lockgeom = 0 ]],
    
    string uaddressmode = "periodic"
        [[ string help = "Tiling mode along the u coordinate"]],
    
    string vaddressmode = "periodic"
        [[ string help = "Tiling mode along the v coordinate"]],

    string framerange = "",
    int frameoffset = 0,
    string frameendaction = "black",
    
    output TYPE out = TYPE_ZERO
        [[  string help = "Output color" ]]
  )
{
    out = default_value;
    float s = texcoord.x;
    float t = texcoord.y;
    
    #if defined(COLOR) || defined(VECTOR) || defined(FLOAT)
    if (layer != ""){
        out = texture (file, s, 1.0-t, "subimage", layer, "swrap", uaddressmode, "twrap", vaddressmode);
    } else {
        out = texture (file, s, 1.0-t, "swrap", uaddressmode, "twrap", vaddressmode);
    }
    #elif defined(COLOR2)
    if (layer != ""){
        color tex = texture (file, s, 1.0-t, "subimage", layer, "swrap", uaddressmode, "twrap", vaddressmode);
        out.r = tex[0];
        out.g = tex[1];
    } else {
        color tex = texture (file, s, 1.0-t, "swrap", uaddressmode, "twrap", vaddressmode);
        out.r = tex[0];
        out.g = tex[1];
    }
    #elif defined(COLOR4)
    if (layer != ""){
        out.rgb = texture (file, s, 1.0-t, "subimage", layer, "swrap", uaddressmode, "twrap", vaddressmode, "alpha", out.a );
    } else {
        out.rgb = texture (file, s, 1.0-t, "swrap", uaddressmode, "twrap", vaddressmode, "alpha", out.a );
    }
    #elif defined(VECTOR2)
    if (layer != ""){
        color tex = texture (file, s, 1.0-t, "subimage", layer, "swrap", uaddressmode, "twrap", vaddressmode);
        out.x = tex[0];
        out.y = tex[1];
    } else {
        color tex = texture (file, s, 1.0-t, "swrap", uaddressmode, "twrap", vaddressmode);
        out.x = tex[0];
        out.y = tex[1];
    }
    #elif defined(VECTOR4)
    if (layer != ""){
        color tex = texture (file, s, 1.0-t, "subimage", layer, "swrap", uaddressmode, "twrap", vaddressmode, "alpha", out.w );
        out.x = tex[0];
        out.y = tex[1];
        out.z = tex[2];

    } else {
        color tex = texture (file, s, 1.0-t, "swrap", uaddressmode, "twrap", vaddressmode,  "alpha", out.w  );
        out.x = tex[0];
        out.y = tex[1];
        out.z = tex[2];
    }
    #endif
}

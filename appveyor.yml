clone_depth: 10
version: '{branch}-{build}'

# Disable Appveyor's test discovery which is not used
test: off

branches:
  only:
    - master
    - release
    - appveyor
    - /RB-/
    - /lg-/

skip_tags: true

build:
  parallel: true
  verbosity: detailed

platform:
  - x64
  # - x86

configuration:
  - Release
  #- Debug

environment:
  matrix:
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    TOOLSET: 140
    BOOSTVER: 1_63_0
    LLVMVER: 4

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    TOOLSET: 141
    BOOSTVER: 1_65_1
    LLVMVER: 5

before_build:
- ps: |
    Write-Output "Configuration: $env:CONFIGURATION"
    Write-Output "Platform: $env:PLATFORM"
    Get-ChildItem Env:

    [Array]$OSL_BUILD_FLAGS = "--", "/nologo", "/verbosity:minimal";

    $DWN_DIR = "C:\projects\OSLdownloads"
    $DEP_DIR = "$env:APPVEYOR_BUILD_FOLDER\dependencies"
    $BOOST_ROOT = "C:\Libraries\boost_$env:BOOSTVER"
    $PYTHON_DIR = "C:\Python27"
    $LLVM_DIR = "$DEP_DIR"
    $env:Path += ";$DEP_DIR\lib;$DEP_DIR\bin"
    $OSL_INT_DIR = "build\windows$env:PLATFORM"

    # RDP into the build-bot to try some stuff out
    # iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    # $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

    # Choose the VisualStudio generator
    $GENERATOR = switch ($env:TOOLSET)
    {
        "141" {"Visual Studio 15 2017"}
        "140" {"Visual Studio 14 2015"}
        "120" {"Visual Studio 12 2013"}
    }

    # Final setup based on 64 or 32 bit
    if ($env:PLATFORM -eq "x64") {
        $GENERATOR = "$GENERATOR Win64"
        $PYTHON_DIR = "$PYTHON_DIR-x64"
        $BOOST_LIBRARYDIR = "$BOOST_ROOT\lib64"
    } else {
        $BOOST_LIBRARYDIR = "$BOOST_ROOT\lib32"
    }
    $BOOST_LIBRARYDIR = "$BOOST_LIBRARYDIR-msvc-$($env:TOOLSET.Substring(0,2)).$($env:TOOLSET.Substring(2,1))"

    # Always create the download directory
    md $DWN_DIR -Force | Out-Null;
    cd $DWN_DIR

    cinst winflexbison

    # Download the dependencies
    $env:OSL_WINDEPS = "OSLWindowsDependencies-$($env:PLATFORM)-LLVM$($env:LLVMVER)-$($env:TOOLSET)"

    # Try the user's repo first
    Start-FileDownload "https://github.com/$env:APPVEYOR_REPO_NAME/releases/download/WindowsDependencies/$($env:OSL_WINDEPS).zip"
    unzip "$($env:OSL_WINDEPS).zip" -d $DEP_DIR
    if ($LastExitCode -ne 0) {
        # Fallback to master
        Start-FileDownload "https://github.com/imageworks/OpenShadingLanguage/releases/download/WindowsDependencies/$($env:OSL_WINDEPS).zip"
        unzip "$($env:OSL_WINDEPS).zip" -d $DEP_DIR
    }

    # If the dependency directory exists/cached, use it
    if (($LastExitCode -ne 0) -Or !(Test-Path -Path $DEP_DIR)) {
        md $DEP_DIR -Force | Out-Null; cd $DEP_DIR
        md $DEP_DIR\include -Force | Out-Null; cd $DEP_DIR
        md $DEP_DIR\lib -Force | Out-Null; cd $DEP_DIR

        # Move this to OIIO and publish the image dependencies there?
        cd $DWN_DIR
        nuget install freetype
        mv .\freetype.2.8.0.1\build\native\include\* $DEP_DIR\include\
        mv .\freetype.2.8.0.1\build\native\lib\$env:PLATFORM\v$env:TOOLSET\dynamic\$env:CONFIGURATION\*.lib $DEP_DIR\lib\
        mv .\freetype.redist.2.8.0.1\build\native\bin\$env:PLATFORM\v$env:TOOLSET\dynamic\$env:CONFIGURATION\*.dll $DEP_DIR\lib\

        # Tiff, JPEG, and PNG have no msvc-14.1 build (yet?)
        $TOOLSET = $env:TOOLSET
        if ($env:TOOLSET -eq "141") { $TOOLSET=140 }

        # TIFF
        nuget install libtiff
        mv .\libtiff*\build\native\include\*.h $DEP_DIR\include\
        mv .\libtiff*\build\native\lib\$env:CONFIGURATION\$env:PLATFORM\v$TOOLSET\*.lib $DEP_DIR\lib\
        mv .\libtiff.redist*\build\native\bin\$env:CONFIGURATION\$env:PLATFORM\v$TOOLSET\*.dll $DEP_DIR\lib\

        # TIFF installs ZIP too
        mv zlib.v$TOOLSET.*\build\native\include\*.h $DEP_DIR\include\
        mv zlib.v$TOOLSET.*\lib\native\v$TOOLSET\windesktop\msvcstl\dyn\rt-dyn\$env:PLATFORM\$env:CONFIGURATION\*.lib $DEP_DIR\lib\
        mv zlib.v$TOOLSET.*\lib\native\v$TOOLSET\windesktop\msvcstl\dyn\rt-dyn\$env:PLATFORM\$env:CONFIGURATION\*.dll $DEP_DIR\lib\

        # TIFF installs JPEG too
        mv .\libjpeg*\build\native\include\*.h $DEP_DIR\include\
        mv .\libjpeg*\build\native\lib\v$TOOLSET\$env:PLATFORM\$env:CONFIGURATION\dynamic\cdecl\*.lib $DEP_DIR\lib\
        mv .\libjpeg.redist*\build\native\bin\v$TOOLSET\$env:PLATFORM\$env:CONFIGURATION\dynamic\cdecl\*.dll $DEP_DIR\lib\

        # PNG
        nuget install libpng
        mv .\libpng*\build\native\include\*.h $DEP_DIR\include\
        mv .\libpng*\build\native\lib\$env:PLATFORM\v$TOOLSET\dynamic\$env:CONFIGURATION\*.lib $DEP_DIR\lib\
        mv .\libpng*\build\native\bin\$env:PLATFORM\v$TOOLSET\dynamic\$env:CONFIGURATION\*.dll $DEP_DIR\lib\

        # IlmBase
        cd $DWN_DIR
        Start-FileDownload http://download.savannah.nongnu.org/releases/openexr/ilmbase-2.2.1.tar.gz
        tar -xzf ilmbase-2.2.1.tar.gz ; cd ilmbase* ; md "$OSL_INT_DIR" -Force | Out-Null; cd "$OSL_INT_DIR"
        cmake ..\.. -G "$GENERATOR" -DCMAKE_CONFIGURATION_TYPES="$env:CONFIGURATION" -DCMAKE_PREFIX_PATH="$DEP_DIR" -DCMAKE_INSTALL_PREFIX="$DEP_DIR" -DCMAKE_CXX_FLAGS=" /W1 /EHsc /DWIN32=1 "
        cmake --build . --config $env:CONFIGURATION --target INSTALL $OSL_BUILD_FLAGS

        # OpenEXR
        cd $DWN_DIR
        Start-FileDownload http://download.savannah.nongnu.org/releases/openexr/openexr-2.2.1.tar.gz
        tar -xzf openexr-2.2.1.tar.gz ; cd openexr* ; md "$OSL_INT_DIR" -Force | Out-Null; cd "$OSL_INT_DIR"
        cmake ..\.. -G "$GENERATOR" -DCMAKE_CONFIGURATION_TYPES="$env:CONFIGURATION" -DCMAKE_PREFIX_PATH="$DEP_DIR" -DCMAKE_INSTALL_PREFIX="$DEP_DIR" -DILMBASE_PACKAGE_PREFIX="$DEP_DIR" -DCMAKE_CXX_FLAGS=" /W1 /EHsc /DWIN32=1 "
        cmake --build . --config $env:CONFIGURATION --target INSTALL $OSL_BUILD_FLAGS

        # LLVM
        if ($env:OSL_WINDEPS.IndexOf("LLVM") -gt 0) {
          cd $DWN_DIR
          git clone --depth 10 --branch "release_$($env:LLVMVER)0" https://github.com/llvm-mirror/llvm.git
          cd llvm; md "$OSL_INT_DIR" -Force | Out-Null; cd "$OSL_INT_DIR"
          cmake ..\.. -G "$GENERATOR" -DCMAKE_CONFIGURATION_TYPES="$env:CONFIGURATION" -DCMAKE_PREFIX_PATH="$DEP_DIR" -DCMAKE_INSTALL_PREFIX="$DEP_DIR" -DLLVM_TARGETS_TO_BUILD="X86"
          cmake --build . --config $env:CONFIGURATION --target INSTALL $OSL_BUILD_FLAGS
        }
        $env:OSL_BUILT_DEPS=1
    } else {
        $env:OSL_BUILT_DEPS=0
    }


build_script:
- ps: |
    # If on a branch named 'appveyor' and dependencies (including LLVM) were
    # built: skip OSL in favor of deployment of the pre-built dependencies
    if (($env:APPVEYOR_REPO_BRANCH -eq "appveyor") -And
        ($env:OSL_BUILT_DEPS -eq 1) -And
        ($env:OSL_WINDEPS.IndexOf("LLVM") -gt 0)) {
        echo "OSL tests skipped in favor of uploading dependency cache"
        # Echo to build log and Appveyors message page
        Add-AppveyorMessage -Message "OSL tests skipped in favor of uploading dependency cache" -Category Warning
    } else {
        # OpenImageIO
        $env:OPENIMAGEIOHOME = "C:\projects\oiio"
        $env:FREETYPE_DIR = "$DEP_DIR"
        $FREETYPE_LIBRARY = "$DEP_DIR\lib\freetype28.lib"
        cd $DWN_DIR
        git clone --depth 10 https://github.com/OpenImageIO/oiio.git oiiosrc
        cd .\oiiosrc; md "$OSL_INT_DIR" -Force | Out-Null; cd "$OSL_INT_DIR"
        cmake ..\.. -G "$GENERATOR" -DCMAKE_CONFIGURATION_TYPES="$env:CONFIGURATION" -DCMAKE_INSTALL_PREFIX="$env:OPENIMAGEIOHOME" -DCMAKE_PREFIX_PATH="$DEP_DIR;$BOOST_ROOT" -DBOOST_LIBRARYDIR="$BOOST_LIBRARYDIR" -DFREETYPE_LIBRARY="$FREETYPE_LIBRARY" -DUSE_PYTHON=OFF -DOIIO_BUILD_TESTS=OFF -DUSE_NUKE=OFF
        cmake --build . --config $env:CONFIGURATION --target INSTALL $OSL_BUILD_FLAGS

        # Build OSL
        cd $env:APPVEYOR_BUILD_FOLDER
        md "$OSL_INT_DIR" -Force | Out-Null; cd "$OSL_INT_DIR"
        cmake ..\.. -G "$GENERATOR" -DCMAKE_CONFIGURATION_TYPES="$env:CONFIGURATION" -DCMAKE_PREFIX_PATH="$env:OPENIMAGEIOHOME;$DEP_DIR;$BOOST_ROOT;$LLVM_DIR" -DCMAKE_INSTALL_PREFIX="$DEP_DIR" -DLLVM_DIRECTORY="$LLVM_DIR" -DLLVM_STATIC=ON -DOPENIMAGEIOHOME="$env:OPENIMAGEIOHOME" -DBOOST_LIBRARYDIR="$BOOST_LIBRARYDIR" -DFLEX_EXECUTABLE="C:\ProgramData\chocolatey\lib\winflexbison\tools\win_flex.exe" -DBISON_EXECUTABLE="C:\ProgramData\chocolatey\lib\winflexbison\tools\win_bison.exe" -DUSE_QT=OFF -DBUILDSTATIC=OFF -DLINKSTATIC=OFF

        # OSL's CMake should probably be handling Windows config better...
        $OSL_BUILD_DIR = "$env:APPVEYOR_BUILD_FOLDER\$OSL_INT_DIR"
        $env:OSLHOME = "$env:APPVEYOR_BUILD_FOLDER\src"
        $env:OIIO_LIBRARY_PATH = "$OSL_BUILD_DIR\src\osl.imageio\$env:CONFIGURATION"
        $env:Path += ";$OSL_BUILD_DIR\src\oslc\$env:CONFIGURATION"
        $env:Path += ";$OSL_BUILD_DIR\src\oslinfo\$env:CONFIGURATION"
        $env:Path += ";$OSL_BUILD_DIR\src\liboslcomp\$env:CONFIGURATION"
        $env:Path += ";$OSL_BUILD_DIR\src\liboslexec\$env:CONFIGURATION"
        $env:Path += ";$OSL_BUILD_DIR\src\liboslnoise\$env:CONFIGURATION"
        $env:Path += ";$OSL_BUILD_DIR\src\liboslquery\$env:CONFIGURATION"
        $env:Path += ";$env:OPENIMAGEIOHOME\lib;$env:OPENIMAGEIOHOME\bin"
        $env:Path += ";$BOOST_LIBRARYDIR"

        cmake --build . --config $env:CONFIGURATION $OSL_BUILD_FLAGS

        [Array]$OSL_TEST_FLAGS = "-C", $env:CONFIGURATION, "--output-on-failure"
        if ($env:APPVEYOR_BUILD_WORKER_IMAGE -eq "Visual Studio 2017") {
            $OSL_TEST_FLAGS += "-E"
            $OSL_TEST_FLAGS += "render-cornell|render-oren-nayar|render-veachmis|render-ward"
        }
        ctest $OSL_TEST_FLAGS
    }


#init:
#- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

#on_failure:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


artifacts:
  - path: dependencies
    name: $(OSL_WINDEPS)
    type: zip

deploy:
  release: WindowsDependencies
  description: 'OSL Windows Pre-Built Dependencies'
  provider: GitHub
  auth_token:
    secure: r2L1KfXqOe5IdFQKpl+w15LTuqMhpx39jEvmpK5qEeeqblu3dyBtD8ziQ59vUfTI
  artifact: $(OSL_WINDEPS)
  on:
    branch: appveyor
    OSL_BUILT_DEPS: 1


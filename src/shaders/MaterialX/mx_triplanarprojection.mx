// Open Shading Language : Copyright (c) 2009-2017 Sony Pictures Imageworks Inc., et al.
// https://github.com/imageworks/OpenShadingLanguage/blob/master/LICENSE
// 
// MaterialX specification (c) 2017 Lucasfilm Ltd. 
// http://www.materialx.org/

#include "mx_funcs.h"


shader mx_triplanarprojection_TYPE_SUFFIX
    [[ string help = "triplanarprojection node" ]]
  (
    string filex = ""
        [[  string help = "Texture filename",
            string widget = "filename" ]],

    string filey = ""
        [[  string help = "Texture filename",
            string widget = "filename" ]],

    string filez = ""
        [[  string help = "Texture filename",
            string widget = "filename" ]],

    string layerx = "",
    string layery = "",
    string layerz = "",
    TYPE default_value = TYPE_DEFAULT_IN,
    vector position = P,
	normal inN   = N,
    output TYPE out = TYPE_ZERO
  )
{
    color missingColor;
    float missingAlpha;
    setup_missing_color_alpha (default_value, missingColor, missingAlpha);

    float filex_a;
    color filex_rgb = texture(filex, position[1], position[2],
                              "alpha", filex_a, "subimage", layerx,
                              "missingcolor", missingColor,
                              "missingalpha", missingAlpha);

    float filey_a;
    color filey_rgb = texture(filey, position[0], position[2],
                              "alpha", filey_a, "subimage", layery,
                              "missingcolor", missingColor,
                              "missingalpha", missingAlpha);

    float filez_a;
    color filez_rgb = texture(filez, position[0], position[1],
                              "alpha", filez_a, "subimage", layerz,
                              "missingcolor", missingColor,
                              "missingalpha", missingAlpha);

    normal nIn = normalize(inN);
    float blendx = dot(nIn, vector(1, 0, 0));
    float blendy = dot(nIn, vector(0, 1, 0));
    float blendz = dot(nIn, vector(0, 0, 1));

    color rgb = (filex_rgb * blendx) + (filey_rgb * blendy) + (filez_rgb * blendz);
    float alpha = (filex_a * blendx) + (filey_a * blendy) + (filez_a * blendz);

    out = pack (rgb, alpha);
}

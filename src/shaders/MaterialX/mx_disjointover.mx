// Open Shading Language : Copyright (c) 2009-2017 Sony Pictures Imageworks Inc., et al.
// https://github.com/imageworks/OpenShadingLanguage/blob/master/LICENSE
// 
// MaterialX specification (c) 2017 Lucasfilm Ltd. 
// http://www.materialx.org/

#include "mx_funcs.h"


color2 disjointover(color2 fg, color2 bg)
{
    float summedAlpha = fg.a + bg.a;

    color2 out;
    if (summedAlpha <= 1) {
        out.r = fg.r + bg.r;
    } else {
        out.r = fg.r + ((bg.r * (1-fg.a)) / bg.a);
    }

    out.a = min(summedAlpha, 1);
    return out;
}

color4 disjointover(color4 fg, color4 bg)
{
    float summedAlpha = fg.a + bg.a;

    color4 out;
    if (summedAlpha <= 1) {
        out.rgb = fg.rgb + bg.rgb;
    } else {
        float x = (1 - fg.a) / bg.a;
        out.rgb = fg.rgb + bg.rgb * x;
    }

    out.a = min(summedAlpha, 1);
    return out;
}



shader mx_disjointover_TYPE_SUFFIX
    [[ string help = TYPE_STR" Take two color2 or two color4 inputs and use the built-in alpha \
                               channel(s) to control the compositing of the fg and bg inputs" ]]
  (
    TYPE fg = TYPE_DEFAULT_IN,
    TYPE bg = TYPE_DEFAULT_IN,
    output TYPE out = TYPE_DEFAULT_OUT
  )
{
    out = disjointover(fg, bg); 
}

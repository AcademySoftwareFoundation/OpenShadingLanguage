/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2009-2010 Sony Pictures Imageworks Inc., et al.
// All Rights Reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// * Neither the name of Sony Pictures Imageworks nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/////////////////////////////////////////////////////////////////////////////


surface
glass
    [[ string description = "Simple dielectric material" ]]
(
    float Ks = 1
        [[  string description = "Color scaling",
            float UImin = 0, float UIsoftmax = 1 ]],
    color Cs = 1
        [[  string description = "Base color",
            float UImin = 0, float UImax = 1 ]],
    float eta = 1.5
        [[  string description = "Index of refraction",
            float UImin = 1, float UIsoftmax = 2.5 ]],
    int caustics = 0
        [[  string description = "Enable indirect lighting through glass" ]],
    int TIR = 0
        [[  string description = "Enable Total Internal Reflection" ]]
  )
{
    // If the current ray type is glossy or diffuse, that means we
    // are computing indirect lighting. Letting that interact with
    // glass produces caustics, which are normally hard to trace and
    // noisy. So we only return closures if that's not the case or
    // the "caustics" flag is on.
    if (caustics || (!raytype("glossy") && !raytype("diffuse")))
    {
        // Take into account backfacing to invert eta accordingly
        if (backfacing())
        {
            Ci = refraction(N, 1.0 / eta);
            // If Total Internal Reflection is enabled, we also return a reflection
            // closure, which might make rays bounce too much inside an object. That's
            // why we make it optional.
            if (TIR)
               Ci += reflection(N, 1.0 / eta);
        }
        else
            Ci = reflection(N, eta) + refraction(N, eta);
    }
}

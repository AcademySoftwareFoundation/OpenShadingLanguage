// Test swizzle statements

#include "color4.h"

shader swizzle ()
{
    // Make sure floats don't generate a swizzle operation.
    float noswizzle = 1.101;
    noswizzle = 1.001;

    color c = color(1,2,3);
    printf("c: %g\n", c);

    // transitive
    // 1,2,3 -> 2,3,1 -> 3,1,2
    c.brg = c.grb = c.bgr;
    printf("c.brg = c.grb = c.bgr: %g\n", c);

    c.rgb = c.gbr;
    printf("c.rgb = c.gbr: %g\n", c);

    printf("c.r00: %g\n", c.r00);
    printf("c.g01: %g\n", c.g01);
    printf("c.b11: %g\n", c.b11);
    printf("c.bg1: %g\n", c.bg1);
    printf("c.01g: %g\n", c.01g);
    printf("c.101: %g\n", c.101);

    c = c.brg;
    printf("c.rgb = c.brg: %g\n", c);

    c = c.brg;
    printf("c.rgb = c.brg: %g\n", c);

    c = c.brg;
    printf("c.rgb = c.brg: %g\n", c);

	c.rgb = c.bgr;
    printf("c.rgb = c.bgr: %g\n", c);

    c.bgr = c.bgr;
    printf("c.bgr = c.bgr: %g\n", c);

    c.grb = c.bgr;
    printf("c.grb = c.bgr: %g\n", c);

    printf("c.ggr + c.rgr: %g\n", c.ggr + c.rgr);

    c.gbr = c.ggr + c.rgr;

    printf("c.r: %g\n", c.r);
    printf("c.g: %g\n", c.g);
    printf("c.b: %g\n", c.b);

    vector v0 = vector(6,7,8);
    printf("v0.x: %g\n", v0.x);
    printf("v0.y: %g\n", v0.y);
    printf("v0.z: %g\n", v0.z);
    v0.z = v0.x;
    printf("v0.z->x: %g\n", v0.r);

    color  ca[2] = { color(-1,2,3), color(1,-2,-3) };
    color4 c4[2]; // FIXME: = { color4(color(1,2,3),4), color4(color(-1,-2,-3),-4) };

    for (int i = 0; i < 2; ++i) {
        ca[i].r = -ca[i].r;
        c4[i].rgb = color(ca[i].x, ca[i].y, ca[i].z);
        printf("c4[%d].r: %g\n", i, c4[i].rgb.r);
        printf("c4[%d].%s: %g\n", i, i ? "b" : "g", i ? c4[i].rgb.b : c4[i].rgb.g);
        printf("c4[%d].%s: %g\n", i, i ? "g" : "b", i ? c4[i].rgb.g : c4[i].rgb.b);
    }

    printf("c.rrr: %g\n", c.rrr);
    printf("c.rgb: %g\n", c.rgb);
    printf("c.rbg: %g\n", c.rbg);
    printf("c.ggg: %g\n", c.ggg);
    printf("c.grb: %g\n", c.grb);
    printf("c.gbr: %g\n", c.gbr);
    printf("c.bbb: %g\n", c.bbb);
    printf("c.brg: %g\n", c.brg);
    printf("c.ggr: %g\n", c.ggr);

    printf("ca[0].brg: %g\n", ca[0].brg);

    c.rgb = 1;
    printf("c.rgb = 1: %g\n", c);
}

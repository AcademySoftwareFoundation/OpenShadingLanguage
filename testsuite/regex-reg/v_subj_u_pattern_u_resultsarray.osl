// Copyright Contributors to the Open Shading Language project.
// SPDX-License-Identifier: BSD-3-Clause
// https://github.com/AcademySoftwareFoundation/OpenShadingLanguage

shader v_subj_u_pattern_ura (output vector cout = 0)
{
    string v_subj = concat(format("%g", P[0]), " electric blue");

    //printf("%s", v_subj);
    //int matches[4] = {1, 1, 1, 1};
    int matches_m[4];
    int matches_s[4];
   
    int a = -1;
    int b = -1;
    int c = -1;
    int d = -1;
    int e = -1;
    int f = -1;
    int g = -1;
    int h = -1;
    int j = -1;

    a =  regex_match (v_subj, "ham");         // should not match
    b =  regex_match (v_subj, "ue");  // should match
    c =  regex_match (v_subj, "$el");
    d =  regex_match (v_subj, "el[a-b]");
    e =  regex_match (v_subj, ".*tric");       // should match
    f =  regex_search (v_subj,matches_s, "blue");
    h =  regex_match (v_subj, matches_m, "blue");

    for (int i = 0; i < 4; ++i) {
        g += matches_s[i];
        j += matches_m[i];
    }

    if( (a >=0) && (b>=0) && (c>=0) && (d>=0) && (e>=0) && 
        (f>=0)&& (g>=0) && (j>=0) &&(h>=0)) {
        cout = vector(a+b+j/u, (c+d+h/v+u), (e*f+g/v*u));
    }
}

#!/bin/bash

# --- Colors ---
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# --- Environment check ---
if [ -z "$CONDA_PREFIX" ]; then
    echo -e "${RED}Please activate your Conda environment first.${NC}"
    return 0 2>/dev/null || exit 0
fi

# --- Check if the script is sourced ---
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo -e "${YELLOW}Please run this script as:"
    echo -e "    ${NC}source $(basename "${BASH_SOURCE[0]}")"
    echo -e "Otherwise, environment variables won't persist in your current shell."
    return 0 2>/dev/null || exit 0
fi

# --- Environment variables ---
export ZLIB_ROOT=$CONDA_PREFIX
export LLVM_ROOT=$CONDA_PREFIX
export LLVM_DIR=$CONDA_PREFIX/lib/cmake/llvm

# Set paths for critical OSL dependencies
export OpenImageIO_ROOT=$CONDA_PREFIX
export Partio_ROOT=$CONDA_PREFIX
export OPENEXR_ROOT=$CONDA_PREFIX
export Boost_ROOT=$CONDA_PREFIX
export Imath_ROOT=$CONDA_PREFIX

export CMAKE_PREFIX_PATH=$CONDA_PREFIX:$LLVM_DIR:$CMAKE_PREFIX_PATH
export PATH=$CONDA_PREFIX/bin:$PATH
export LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH

export CC=$CONDA_PREFIX/bin/clang
export CXX=$CONDA_PREFIX/bin/clang++

# --- Project directories ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OSL_DIR="$(realpath "$SCRIPT_DIR/../../")"
PROJECT_BUILD_DIR="$(realpath "$OSL_DIR/../osl-build")"
PROJECT_INSTALL_DIR="$(realpath "$OSL_DIR/../osl-install")"
BUILD_DIR_RELEASE="$PROJECT_BUILD_DIR/release"
BUILD_DIR_DEBUG="$PROJECT_BUILD_DIR/debug"

# --- Out-of-source build notice ---
NOTICE_FILE="$PROJECT_BUILD_DIR/.approved_out_of_source_build"
if [ ! -f "$NOTICE_FILE" ]; then
    echo -e "${YELLOW}Notice:${NC} This script will create out-of-source build directories:"
    echo -e "  Debug build:   $BUILD_DIR_DEBUG"
    echo -e "  Release build: $BUILD_DIR_RELEASE"
    echo -e "  Install dir:   $PROJECT_INSTALL_DIR"

    read -p "Do you want to continue? [y/n]: " CONFIRM
    if [[ ! "$CONFIRM" =~ ^[Yy]$ ]]; then
        echo "Build cancelled by user."
        return 0 2>/dev/null || exit 0
    fi

    mkdir -p "$PROJECT_BUILD_DIR"
    touch "$NOTICE_FILE"
fi

# --- CMake configuration file ---
CMAKE_CONFIG_FILE="$PROJECT_BUILD_DIR/osl_build_config.cmake"

# Create/update CMake config file if it doesn't exist or user wants to reconfigure
if [ ! -f "$CMAKE_CONFIG_FILE" ]; then
    echo -e "${YELLOW}No CMake configuration found. Please select build options:${NC}"

    # Boolean options
    read -p "Build tests? [ON/OFF] (default: ON): " OSL_BUILD_TESTS
    read -p "Build shaders? [ON/OFF] (default: ON): " OSL_BUILD_SHADERS
    read -p "Include OptiX support? [ON/OFF] (default: OFF): " OSL_USE_OPTIX
    read -p "Use fast math? [ON/OFF] (default: ON): " USE_FAST_MATH
    read -p "Partio support? [ON/OFF] (default: ON): " USE_PARTIO
    read -p "Use LLVM bitcode? [ON/OFF] (default: ON): " USE_LLVM_BITCODE
    read -p "Build plugins? [ON/OFF] (default: ON): " OSL_BUILD_PLUGINS
    read -p "Use ustring hash? [ON/OFF] (default: OFF): " OSL_USTRINGREP_IS_HASH
    read -p "No default TextureSystem? [ON/OFF] (default: OFF): " OSL_NO_DEFAULT_TEXTURESYSTEM
    read -p "Install documentation? [ON/OFF] (default: ON): " INSTALL_DOCS

    # Set defaults if empty
    OSL_BUILD_TESTS=${OSL_BUILD_TESTS:-ON}
    OSL_BUILD_SHADERS=${OSL_BUILD_SHADERS:-ON}
    OSL_USE_OPTIX=${OSL_USE_OPTIX:-OFF}
    USE_FAST_MATH=${USE_FAST_MATH:-ON}
    USE_PARTIO=${USE_PARTIO:-ON}
    USE_LLVM_BITCODE=${USE_LLVM_BITCODE:-ON}
    OSL_BUILD_PLUGINS=${OSL_BUILD_PLUGINS:-ON}
    OSL_USTRINGREP_IS_HASH=${OSL_USTRINGREP_IS_HASH:-OFF}
    OSL_NO_DEFAULT_TEXTURESYSTEM=${OSL_NO_DEFAULT_TEXTURESYSTEM:-OFF}
    INSTALL_DOCS=${INSTALL_DOCS:-ON}

    # Create CMake config file
    mkdir -p "$PROJECT_BUILD_DIR"
    cat > "$CMAKE_CONFIG_FILE" <<EOL
# OSL Build Configuration
# This file is automatically generated and used by build_osl.sh
# You can edit this file directly and CMake will pick up changes

set(OSL_BUILD_TESTS ${OSL_BUILD_TESTS} CACHE BOOL "Build tests")
set(OSL_BUILD_SHADERS ${OSL_BUILD_SHADERS} CACHE BOOL "Build shaders")
set(OSL_USE_OPTIX ${OSL_USE_OPTIX} CACHE BOOL "Include OptiX support")
set(USE_FAST_MATH ${USE_FAST_MATH} CACHE BOOL "Use fast math")
set(USE_PARTIO ${USE_PARTIO} CACHE BOOL "Partio support")
set(USE_LLVM_BITCODE ${USE_LLVM_BITCODE} CACHE BOOL "Use LLVM bitcode")
set(OSL_BUILD_PLUGINS ${OSL_BUILD_PLUGINS} CACHE BOOL "Build plugins")
set(OSL_USTRINGREP_IS_HASH ${OSL_USTRINGREP_IS_HASH} CACHE BOOL "Use ustring hash")
set(OSL_NO_DEFAULT_TEXTURESYSTEM ${OSL_NO_DEFAULT_TEXTURESYSTEM} CACHE BOOL "No default TextureSystem")
set(INSTALL_DOCS ${INSTALL_DOCS} CACHE BOOL "Install documentation")

# Dependency paths
set(OpenImageIO_ROOT "\$ENV{CONDA_PREFIX}" CACHE PATH "OpenImageIO root")
set(Partio_ROOT "\$ENV{CONDA_PREFIX}" CACHE PATH "Partio root")
set(Boost_ROOT "\$ENV{CONDA_PREFIX}" CACHE PATH "Boost root")
set(OPENEXR_ROOT "\$ENV{CONDA_PREFIX}" CACHE PATH "OpenEXR root")
set(Imath_ROOT "\$ENV{CONDA_PREFIX}" CACHE PATH "Imath root")
set(LLVM_DIR "\$ENV{CONDA_PREFIX}/lib/cmake/llvm" CACHE PATH "LLVM cmake dir")
EOL

    echo -e "${GREEN}Created CMake configuration file: $CMAKE_CONFIG_FILE${NC}"
else
    echo -e "${GREEN}Using existing CMake configuration: $CMAKE_CONFIG_FILE${NC}"
    echo -e "${YELLOW}Edit this file directly to change build options.${NC}"
fi

# --- Function to configure cmake ---
configure_cmake() {
    local BUILD_DIR="$1"
    local BUILD_TYPE="$2"

    mkdir -p "$BUILD_DIR"

    echo -e "${GREEN}=== Configuring OSL ($BUILD_TYPE) ===${NC}"
    echo -e "Using CMake config: $CMAKE_CONFIG_FILE"

    # Simple CMake command - the config file handles all the options
    cmake -B "$BUILD_DIR" -S "$OSL_DIR" \
        -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$PROJECT_INSTALL_DIR" \
        -C "$CMAKE_CONFIG_FILE" \
        -DSTOP_ON_WARNING=OFF

    if [ $? -ne 0 ]; then
        echo -e "${RED}CMake configuration failed!${NC}"
        return 1
    fi
}

# --- Debug build ---
build_debug() {
    echo -e "${GREEN}=== Building OSL (Debug) ===${NC}"
    if ! configure_cmake "$BUILD_DIR_DEBUG" "Debug"; then
        return 1
    fi
    cmake --build "$BUILD_DIR_DEBUG" -j$(nproc)
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}=== Debug build complete ===${NC}"
    else
        echo -e "${RED}=== Debug build failed ===${NC}"
        return 1
    fi
}

# --- Release build ---
build_release() {
    echo -e "${GREEN}=== Building OSL (Release) ===${NC}"
    mkdir -p "$PROJECT_INSTALL_DIR"
    if ! configure_cmake "$BUILD_DIR_RELEASE" "Release"; then
        return 1
    fi
    cmake --build "$BUILD_DIR_RELEASE" -j$(nproc)
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}=== Release build complete ===${NC}"
    else
        echo -e "${RED}=== Release build failed ===${NC}"
        return 1
    fi
}

# --- Install from Release build ---
install_release() {
    echo -e "${GREEN}=== Installing OSL (Release) ===${NC}"
    if [ ! -d "$BUILD_DIR_RELEASE" ]; then
        echo -e "${RED}Error: Release build not found. Run 'source build_osl.sh release' first.${NC}"
        return 1
    fi
    cmake --install "$BUILD_DIR_RELEASE"
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}=== Installed to $PROJECT_INSTALL_DIR ===${NC}"
    else
        echo -e "${RED}=== Installation failed ===${NC}"
        return 1
    fi
}

# --- Show current configuration ---
show_config() {
    echo -e "${GREEN}=== Current OSL Build Configuration ===${NC}"
    echo -e "Config file: $CMAKE_CONFIG_FILE"
    echo -e ""
    if [ -f "$CMAKE_CONFIG_FILE" ]; then
        cat "$CMAKE_CONFIG_FILE"
    else
        echo -e "${RED}Configuration file not found!${NC}"
    fi
}

# --- Clean build directories ---
clean_build() {
    echo -e "${YELLOW}Cleaning build directories...${NC}"
    rm -rf "$BUILD_DIR_DEBUG"
    rm -rf "$BUILD_DIR_RELEASE"
    echo -e "${GREEN}Build directories cleaned!${NC}"
}

# --- Parse mode ---
if [ -z "$1" ]; then
    echo -e "${RED}Error: You must specify a mode.${NC}"
    echo "Usage: source $0 <mode>"
    echo "Modes: debug | release | install | clean | edit-config | show-config"
    return 1 2>/dev/null || exit 1
fi

MODE="$1"
case "$MODE" in
    debug)
        build_debug
        ;;
    release)
        build_release
        ;;
    install)
        install_release
        ;;
    clean)
        clean_build
        ;;
    show-config)
        show_config
        ;;
    *)
        echo -e "${RED}Invalid mode: $MODE${NC}"
        echo "Valid modes: debug | release | install | clean | show-config"
        return 1 2>/dev/null || exit 1
        ;;
esac
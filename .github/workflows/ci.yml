# Copyright Contributors to the Open Shading Language project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/imageworks/OpenShadingLanguage

# GitHub Actions workflow file for CI
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: CI

on:
  push:
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
      - '**.tex'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
      - '**.tex'
  schedule:
    # Full nightly build
    - cron: "0 4 * * *"


jobs:
  vfxplatform-2019:
    name: "Linux VFXP-2019: gcc6 C++11 llvm7 py2.7 boost-1.66 exr-2.3 OIIO-2.1 sse2"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 11
          PYTHON_VERSION: 2.7
          USE_PYTHON: 0
          OPENIMAGEIO_VERSION: RB-2.1
        run: |
            # Remove pesky wrong installed OIIO version
            rm -rf /usr/local/include/OpenImageIO
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  vfxplatform-2020:
    name: "Linux VFXP-2020 gcc6/C++14 llvm7 py3.7 boost-1.70 exr-2.4 OIIO-2.1 sse4"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2020
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 14
          PYTHON_VERSION: 3.7
          USE_SIMD: sse4.2
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  vfxplatform-2021:
    name: "Linux VFXP-2021 gcc9/C++17 llvm10 py3.7 boost-1.70 exr-2.5 OIIO-2.2 avx2"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2021
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 17
          PYTHON_VERSION: 3.7
          USE_SIMD: avx2,f16c
          OPENEXR_VERSION: v2.5.3
          OPENIMAGEIO_VERSION: RB-2.2
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-debug-gcc7-llvm8:
    name: "Linux Debug gcc7, C++14, llvm8, OIIO release, sse4, exr2.4"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-7
          USE_CPP: 14
          CMAKE_CXX_STANDARD: 14
          LLVM_VERSION: 8.0.0
          OPENEXR_VERSION: v2.4.1
          OPENIMAGEIO_VERSION: release
          USE_SIMD: sse4.2
          MY_CMAKE_FLAGS: -DCMAKE_BUILD_TYPE=Debug
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-clang9-llvm9:
    name: "Linux clang9, C++14, llvm9, oiio release, avx, exr2.4, avx"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2019-clang9
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: clang++
          CMAKE_CXX_STANDARD: 14
          USE_SIMD: avx
          OPENIMAGEIO_VERSION: release
          PYTHON_VERSION: 2.7
        run: |
            # Remove pesky wrong installed OIIO version
            rm -rf /usr/local/include/OpenImageIO
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-2021ish-gcc8-llvm10:
    name: "Linux gcc8, C++17, llvm10, oiio master, avx2, exr2.5, avx2"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-8
          CMAKE_CXX_STANDARD: 17
          LLVM_VERSION: 10.0.0
          USE_SIMD: avx2,f16c
          OPENEXR_VERSION: v2.5.3
          OPENIMAGEIO_VERSION: master
          OPENIMAGEIO_CMAKE_FLAGS: -DBUILD_FMT_VERSION=7.0.1
          PUGIXML_VERSION: v1.10
          PYBIND11_VERSION: v2.5.0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-bleeding-edge:
    # Test against development master for relevant dependencies, latest
    # supported releases of everything else.
    name: "Linux bleeding edge: gcc10, C++17, llvm10, oiio/ocio/exr/pybind-master, avx2"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++-10
          USE_CPP: 17
          CMAKE_CXX_STANDARD: 17
          LLVM_VERSION: 10.0.0
          USE_SIMD: avx2,f16c
          OPENEXR_VERSION: master
          OPENIMAGEIO_VERSION: master
          OPENIMAGEIO_CMAKE_FLAGS: -DBUILD_FMT_VERSION=master
          OPENCOLORIO_VERSION: master
          PYBIND11_VERSION: master
          PUGIXML_VERSION: master
          OSL_BUILD_MATERIALX: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  linux-oldest:
    # Oldest versions of the dependencies that we can muster, and various
    # things disabled.
    name: "Linux oldest everything: gcc6 C++11 llvm7 py2.7 boost-1.66 oiio-2.1 no-simd exr2.3"
    runs-on: ubuntu-latest
    container:
      image: aswf/ci-osl:2019
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 11
          PYTHON_VERSION: 2.7
          USE_SIMD: 0
          USE_PYTHON: 0
          OPENIMAGEIO_VERSION: RB-2.1
          PUGIXML_VERSION: v1.8
        run: |
            # Remove pesky wrong installed OIIO version
            rm -rf /usr/local/include/OpenImageIO
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  macos-py38:
    name: "Mac py38"
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: clang++
          USE_CPP: 14
          CMAKE_CXX_STANDARD: 14
          PYTHON_VERSION: 3.8
          LLVM_BC_GENERATOR: /usr/bin/clang++
          LLVMBREWVER: "@9"
            # ^^ There's a bug in the current Homebrew llvm 10.0.1 where
            # it fails to link because of missing libxml2.tbd. It's fixed
            # upstream in LLVM, but not yet fixed in Homebrew. Hopefully
            # a subsequent 10.0.x or 11.x will fix it, but for now, just
            # fall back to llvm@9.
          MY_CMAKE_FLAGS: -DLLVM_BC_GENERATOR=/usr/bin/clang++
            # ^^ Force bitcode compiles to use the system clang compiler by
            # preemptively telling it the LLVM_BC_GENERATOR, to avoid some
            # library mismatches we tend to see on GH CI's Mac images.
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/install_homebrew_deps.bash
            brew uninstall llvm
            OPENIMAGEIO_CMAKE_FLAGS="-DOIIO_BUILD_TESTS=0 -DUSE_OPENGL=0"
            source src/build-scripts/build_openimageio.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  # windows:
  #   name: "Windows"
  #   runs-on: windows-2019
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup Nuget.exe
  #       uses: warrenbuckley/Setup-Nuget@v1
  #     - name: all
  #       shell: bash
  #       env:
  #         PYTHON_VERSION: 3.6
  #         CMAKE_GENERATOR: "Visual Studio 16 2019"
  #         OPENEXR_VERSION: v2.4.1
  #       run: |
  #           source src/build-scripts/ci-startup.bash
  #           source src/build-scripts/gh-win-installdeps.bash
  #           source src/build-scripts/ci-build-and-test.bash
  #    - uses: actions/upload-artifact@v2
  #      if: failure()
  #      with:
  #        name: ${{ github.job }}
  #        path: build/*/testsuite/*/*.*

  # sanitizer:
  #   name: "Sanitizers"
  #   runs-on: ubuntu-18.04
  #   if: github.event_name == 'pull_request' || contains(github.ref, 'san') || contains(github.ref, 'RB') || contains(github.ref, 'release') || contains(github.ref, 'master') || contains(github.ref, 'gh')
  #   steps:
  #     - uses: actions/checkout@v2
  #     #- uses: docker://aswfstaging/ci-base:2019
  #     - name: all
  #       env:
  #         CXX: g++-7
  #         CMAKE_CXX_STANDARD: 14
  #         SANITIZE: address
  #         USE_PYTHON: 0
  #       run: |
  #           source src/build-scripts/ci-startup.bash
  #           source src/build-scripts/gh-installdeps.bash
  #           source src/build-scripts/ci-build-and-test.bash
  #    - uses: actions/upload-artifact@v2
  #      if: failure()
  #      with:
  #        name: ${{ github.job }}
  #        path: build/*/testsuite/*/*.*

  # linux-static:
  #   name: "Linux static libs: gcc7, C++14, exr2.3"
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     #- uses: docker://aswfstaging/ci-base:2019
  #     - name: all
  #       env:
  #         CXX: g++-7
  #         CMAKE_CXX_STANDARD: 14
  #         BUILD_SHARED_LIBS: OFF
  #       run: |
  #           source src/build-scripts/ci-startup.bash
  #           source src/build-scripts/gh-installdeps.bash
  #           source src/build-scripts/ci-build-and-test.bash
  #    - uses: actions/upload-artifact@v2
  #      if: failure()
  #      with:
  #        name: ${{ github.job }}
  #        path: build/*/testsuite/*/*.*

  clang-format:
    # Test formatting. This test entry doesn't do a full build, it just runs
    # clang-format on everything, and passes if nothing is misformatted.
    # Upon failure, the build artifact will be the full source code with the
    # formatting fixed (diffs will also appear in the console output).
    name: "clang-format verification"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          BUILDTARGET: clang-format
          CMAKE_CXX_STANDARD: 17
          PYTHON_VERSION: 3.7
          SKIP_TESTS: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: src/*/*.{cpp,h}

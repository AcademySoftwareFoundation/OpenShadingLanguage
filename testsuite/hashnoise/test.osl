// Copyright Contributors to the Open Shading Language project.
// SPDX-License-Identifier: BSD-3-Clause
// https://github.com/AcademySoftwareFoundation/OpenShadingLanguage

shader
test (float angle = 10, float scale = 20,
      output color Cout = 0)
{
   // setup some coordinates
   float theta = radians(angle);
   float s = mod(u,0.25) - 0.125;
   float t = mod(v,0.5) - 0.25;
   float cos_theta;
   float sin_theta;
   if (angle == 10) {
       // hard code values for expected case of angle 10
       // to avoid issue of OSL constant folding 
       // producing slightly different values which 
       // create vastly different results due to 
       // aliasing in hashnoise.  
       cos_theta = 0.984807729721069335;
       sin_theta = 0.173648148775100708;
   } else {
       cos_theta = cos(theta);
       sin_theta = sin(theta);
   }
   float ru = cos_theta * s + sin_theta * t;
   float rv = sin_theta * s - cos_theta * t;
   ru *= scale;
   rv *= scale;
   float rz = (scale * (s + t)) / M_SQRT2;
   float ttime = s*scale;

   Cout = 0;
   if (v < 0.49) {
       // float noise in 1,2,3,4 dimensions
       if (u < 0.24)
           Cout = (float) hashnoise(ru);
       else if (u > 0.26 && u < 0.49)
           Cout = (float) hashnoise(ru, rv);
       else if (u > 0.51 && u < 0.74)
           Cout = (float) hashnoise(point(ru, rv, rz));
       else if (u > 0.76)
           Cout = (float) hashnoise(point(ru, rv, rz), ttime);
   } else if (v > 0.51) {
       // color noise in 1,2,3,4 dimensions
       if (u < 0.24)
           Cout = hashnoise(ru);
       else if (u > 0.26 && u < 0.49)
           Cout = hashnoise(ru, rv);
       else if (u > 0.51 && u < 0.74)
           Cout = hashnoise(point(ru, rv, rz));
       else if (u > 0.76)
           Cout = hashnoise(point(ru, rv, rz), ttime);
   }
}

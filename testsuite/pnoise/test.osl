// Copyright Contributors to the Open Shading Language project.
// SPDX-License-Identifier: BSD-3-Clause
// https://github.com/imageworks/OpenShadingLanguage

shader
test (float angle = 0, float inscale = 40,
      float offset = 0, float scale = 1,
      float period = 3,
      output color Cout = 0)
{
   // setup some coordinates
   float theta = radians(angle);
   float s = mod(u,0.25) - 0.125;
   float t = mod(v,0.5) - 0.25;
   float ru = cos(theta) * s + sin(theta) * t;
   float rv = sin(theta) * s - cos(theta) * t;
   ru *= inscale;
   rv *= inscale;
   float rz = (inscale * (s + t)) / M_SQRT2;
   float ttime = u*inscale;

   Cout = 0;
   if (v < 0.49) {
       // float noise in 1,2,3,4 dimensions
       if (u < 0.24)
           Cout = offset + scale * (float) pnoise (ru, period);
       else if (u > 0.26 && u < 0.49)
           Cout = offset + scale * (float) pnoise (ru, rv, period, period);
       else if (u > 0.51 && u < 0.74)
           Cout = offset + scale * (float) pnoise (point(ru, rv, rz), point(period));
       else if (u > 0.76)
           Cout = offset + scale * (float) pnoise (point(ru, rv, rz), ttime, point(period), period);
   } else if (v > 0.51) {
       // color noise in 1,2,3,4 dimensions
       if (u < 0.24)
           Cout = offset + scale * (color) pnoise (ru, period);
       else if (u > 0.26 && u < 0.49)
           Cout = offset + scale * (color) pnoise (ru, rv, period, period);
       else if (u > 0.51 && u < 0.74)
           Cout = offset + scale * (color) pnoise (point(ru, rv, rz), point(period));
       else if (u > 0.76)
           Cout = offset + scale * (color) pnoise (point(ru, rv, rz), ttime, point(period), period);
   }
}

// Open Shading Language : Copyright (c) 2009-2017 Sony Pictures Imageworks Inc., et al.
// https://github.com/imageworks/OpenShadingLanguage/blob/master/LICENSE
// 
// MaterialX specification (c) 2017 Lucasfilm Ltd. 
// http://www.materialx.org/

#include "mx_types.h"

shader SHADER_NAME(mx_image)
    [[ string help = "Texture lookup" ]]
(
    string file = ""
        [[  string help = "Texture filename",
            string widget = "filename" ]],

    string layer = ""
        [[  string help = "Subimage in texture file",
            string widget = "filename" ]],

    TYPE default_value = TYPE_ZERO
        [[  string help = "Default value" ]],

    vector2 texcoord = {u, v}
        [[ string help = "Vector2 texture coordinates",
           int lockgeom = 0 ]],

    string uaddressmode = "periodic"
        [[ string help = "Tiling mode along the u coordinate"]],

    string vaddressmode = "periodic"
        [[ string help = "Tiling mode along the v coordinate"]],

    string framerange = "",

    int frameoffset = 0,

    string frameendaction = "black",

     output TYPE out = TYPE_ZERO
        [[  string help = "Output color" ]]
  )
{
    out = default_value;

    #if defined(COLOR) || defined(VECTOR) || defined(FLOAT)
        color missingColor = default_value;   
        float missingAlpha = 1;        
    #elif defined(COLOR2)
        color missingColor = color(default_value.r, default_value.a, 0);
        float missingAlpha = 1;                
    #elif defined(VECTOR2)
        color missingColor = color(default_value.x, default_value.y, 0);
        float missingAlpha = 1;                
    #elif defined(COLOR4)
        color missingColor = default_value.rgb;
        float missingAlpha = default_value.a;        
    #elif defined(VECTOR4)
        color missingColor = color(default_value.x, default_value.y, default_value.z);
        float missingAlpha = default_value.w;        
    #endif

    float alpha;
    color rgb = texture(file, texcoord.x, texcoord.y, "alpha", alpha, "subimage", layer,
                        "missingcolor", missingColor, "missingalpha", missingAlpha);

    #if defined(COLOR) || defined(VECTOR)
        out = rgb;           
    #elif defined(FLOAT)
        out = rgb[0];
    #elif defined(COLOR2) || defined(VECTOR2)
        out = TYPE(rgb[0], rgb[1]);
    #elif defined(COLOR4)
        out = color4(rgb, alpha);
    #elif defined(VECTOR4)
        out = vector4(rgb[0], rgb[1], rgb[2], alpha);
    #endif 
}
